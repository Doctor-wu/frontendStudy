/*
 * 你是怎么理解闭包的：
 *     1. 什么是闭包已经它的产生  =>基础扎实
 *        + 堆栈内存
 *        + ECStack 、EC、VO、AO、Scope、ScopeChain
 *        + 浏览器垃圾回收机制
 *     2. 优缺点和作用
 *        + 保护
 *        + 保存
 *     3. 分析应用场景  =>实战应用和处理思维
 *        + 循环事件绑定    
 *        + let
 *        + 单例设计模式
 *        + 高阶函数：惰性函数、柯理化函数、compose函数
 *     4. 源码分析  =>阅读源码的能力
 *        + JQ源码
 *        + 函数的防抖和节流
 *        + bind
 *        + ... （REACT中的高阶组件/redux源码/react-redux源码）
 *     5. 自己的开源作品  =>进阶自我
 * 
 * ====>只讲核心，不展开细节描述（引导他问你） “点到为止”
 * 
 * ====>加入一些引导过渡语：自己大量研究；项目中遇到问题后专门去搞了搞；我先把我了解的和您说一遍，您看看哪些还没有说到的，再帮我指点一下；加入一些场景；
 * 
 * 你是怎么理解面向对象的： 
 *     1. 基础理论
 *       + 面向对象和面向过程
 *       + 类/实例（包含类的继承封装和多态）
 *       + new构造函数
 *       + __proto__和prototype
 *       + ...
 *     2. 应用场景
 *       + 应用它的思想：借用数组方法实现类数组的处理、数据类型检测、基于内置类重写方法...
 *       + 插件组件的封装
 *         + 突出自己在项目中封装过哪些插件
 *         + 大体怎么封装的（核心思想）
 *         + API数量以及带来的效果
 *       + ...
 *     3. 研究源码
 *       + JQ 
 *       + Lodash
 *       + Vue/React...
 *       + ...
 */     